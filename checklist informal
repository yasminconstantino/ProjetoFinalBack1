faz login tutor
exibe pets do tutor logado
// busca pet por todos os parametros
// exibe o pet buscado
busca o vet por parametro
exibe o vet
exibe todos os vets disponiveis
 acessa perfis individuais pet e vet
altera foto sem quebrar o resto, 
acessa form cad pet no perfil do tutor
cadastra, edita e deleta pet

A an√°lise dos c√≥digos apresentados, com base nos **crit√©rios de avalia√ß√£o do projeto**, est√° organizada a seguir:

---

### **1. Objetivos da disciplina (coer√™ncia entre proposta e funcionalidades):**
- **Observa√ß√£o:** O sistema apresentado foca em funcionalidades b√°sicas de CRUD e intera√ß√µes entre os atores principais (tutores, pets e veterin√°rios). A proposta est√° coerente com o objetivo de desenvolvimento web utilizando PHP e PDO.
- **Avalia√ß√£o:** Atende ao crit√©rio, pois h√° manipula√ß√£o de banco de dados, organiza√ß√£o modular de fun√ß√µes e implementa√ß√£o de diferentes p√°ginas.

---

### **2. Tr√™s CRUDs completos (inser√ß√£o, altera√ß√£o, exclus√£o):**
- Para **Tutores**:
  - **Inser√ß√£o:** Realizada pela fun√ß√£o `registerTutor`.
  - **Altera√ß√£o:** Implementada na p√°gina de perfil com a fun√ß√£o `updateTutor`.
  - **Exclus√£o:** Implementada por meio da fun√ß√£o `deleteTutor`.

- Para **Pets** e **Veterin√°rios**:
  - Os c√≥digos n√£o foram detalhados aqui, mas o texto menciona que h√° p√°ginas similares para pets e veterin√°rios. Se as funcionalidades dessas p√°ginas replicam o que foi feito para tutores, o crit√©rio de CRUD completo ser√° atendido.

- **Avalia√ß√£o:** Provavelmente atende ao crit√©rio, mas √© necess√°rio confirmar se as p√°ginas de pets e veterin√°rios t√™m CRUD completo implementado de forma funcional.

---

### **3. Aplica√ß√£o diferenciada dos CRUDs (complexidade maior):**
- **Busca por veterin√°rios:** Existe uma funcionalidade de pesquisa avan√ßada baseada em especialidades e nomes, que pode ser considerada uma aplica√ß√£o mais complexa.
- **Integra√ß√£o entre tutores e pets:** Cada tutor s√≥ consegue acessar os pets vinculados ao seu perfil, o que demonstra uma l√≥gica de controle por relacionamento.

- **Avalia√ß√£o:** Atende ao crit√©rio, pois existe ao menos uma funcionalidade diferenciada (busca).

---

### **4. Autentica√ß√£o de usu√°rio e upload de arquivo:**
- **Autentica√ß√£o:** Implementada no sistema. Tutores precisam estar logados para acessar funcionalidades restritas, como visualizar ou editar o perfil e os pets.
- **Upload de arquivo:** Implementado no perfil do tutor, permitindo alterar a foto de perfil.

- **Avalia√ß√£o:** Atende ao crit√©rio.

---

### **5. Utiliza√ß√£o de classes para manipula√ß√£o do banco de dados (PDO):**
- **Uso de PDO:** O sistema utiliza `prepare` e `execute` para interagir com o banco de dados em todas as fun√ß√µes apresentadas, como `getTutorInfo`, `updateTutor`, `deleteTutor`, etc.
- **Cria√ß√£o de classes:** Os exemplos fornecidos utilizam fun√ß√µes para manipula√ß√£o do banco de dados, mas **n√£o utilizam classes**, o que √© um requisito. Para atender ao crit√©rio, seria necess√°rio encapsular as opera√ß√µes do banco de dados em classes espec√≠ficas (por exemplo, uma classe `Tutor` com m√©todos como `insert()`, `update()`, etc.).

- **Avalia√ß√£o:** **N√£o atende ao crit√©rio** em sua totalidade, pois n√£o utiliza classes.

---

### **6. Hospedagem do sistema em servidor gratuito:**
- **Hospedagem:** O sistema utiliza caminhos absolutos no servidor local (por exemplo, `/opt/lampp/htdocs/`), o que indica que ainda n√£o foi hospedado. N√£o h√° evid√™ncias de configura√ß√£o para ambiente remoto ou tentativa de justificativa para problemas na hospedagem.
  
- **Avalia√ß√£o:** **N√£o atende ao crit√©rio**, mas pode ser resolvido se o projeto for configurado e hospedado em servi√ßos gratuitos como Heroku, 000webhost, ou Railway.

---

### **Coment√°rios e Observa√ß√µes Gerais**
1. **Valida√ß√£o de Campos:**
   - O sistema exige campos obrigat√≥rios nos formul√°rios com o atributo `required`, mas n√£o foram apresentadas valida√ß√µes mais complexas (como formato de e-mail, CPF, ou telefone) no backend.

2. **Seguran√ßa:**
   - A senha do usu√°rio est√° sendo armazenada sem criptografia. √â necess√°rio utilizar `password_hash` e `password_verify` para garantir seguran√ßa.

3. **Organiza√ß√£o do C√≥digo:**
   - Apesar de funcional, o c√≥digo pode ser refatorado para usar classes, reduzindo repeti√ß√£o e melhorando a estrutura.

4. **Estilo e Usabilidade:**
   - O sistema demonstra cuidado com estilos e usabilidade b√°sica (links de navega√ß√£o, mensagens de sucesso/erro). A interface atende ao objetivo do trabalho.

---

### **Resumo da Avalia√ß√£o**
| **Crit√©rio**                                    | **Avalia√ß√£o**             |
|-------------------------------------------------|---------------------------|
| Objetivos da disciplina                         | ‚úÖ Atende                 |
| CRUDs completos (m√≠nimo 3 tabelas)             | ‚úÖ Provavelmente atende   |
| Aplica√ß√£o diferenciada                          | ‚úÖ Atende                 |
| Autentica√ß√£o e upload                           | ‚úÖ Atende                 |
| Uso de classes e PDO                            | ‚ùå N√£o atende totalmente  |
| Hospedagem em servidor gratuito                 | ‚ùå N√£o atende             |

---

### **Sugest√µes para Ajustes**
1. Refatore o c√≥digo para utilizar classes no lugar de fun√ß√µes isoladas, garantindo que o crit√©rio seja plenamente atendido.
2. Realize a hospedagem do sistema em um servidor gratuito e documente eventuais dificuldades, caso n√£o seja poss√≠vel.
3. Melhore a seguran√ßa, incluindo a criptografia de senhas no cadastro/edi√ß√£o de usu√°rios.
4. Verifique a implementa√ß√£o completa dos CRUDs para pets e veterin√°rios e adicione valida√ß√µes de campos mais robustas no backend.

Se precisar de ajuda para ajustar algum ponto espec√≠fico, √© s√≥ avisar! üöÄ